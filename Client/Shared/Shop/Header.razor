@using LaptopStore.Application.Features.Products.Queries.GetAllPaged;
@using LaptopStore.Domain.Entities.Catalog
@using LaptopStore.Shared.Constants.Application
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization
@using MudBlazor;
@using System;
@using System.Linq;
@using System.Net.Http.Headers;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components
@using System.Text.Json;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Header> localizer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject IJSRuntime JS
<link href="css/header.css" rel="stylesheet">

<MudPaper Class="header" Elevation="0">
    <div class="header-grid">
        <!-- Logo -->
        <MudItem Class="logo-container">
            <MudNavLink Href="/home">
                <img src="../images/icon/logo.png" alt="Store Image" class="logo-img" />
            </MudNavLink>
        </MudItem>

        <div class="menu-container">
            <MudNavLink Href="/allproducts" Class="menu-button">Danh mục</MudNavLink>
        </div>

        <!-- Search Bar -->
        <MudItem Class="search-container">
            <div class="search-bar">
                <MudTextField Class="search-text" T="string" ValueChanged="@(s => OnSearch(s))"
                              Placeholder="@localizer["Bạn muốn tìm gì..."]"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" />
            </div>
        </MudItem>


        <!-- Contact Icons -->
        <MudItem Class="contact-container">
            <MudNavLink Href="/info" Class="contact-info" Icon="@Icons.Material.Filled.Info">Thông tin </MudNavLink>
            <MudNavLink Href="/contact" Class="contact-info" Icon="@Icons.Material.Filled.Contacts">Liên Hệ</MudNavLink>
            <MudNavLink Href="/orderdetail" Class="contact" Icon="@Icons.Material.Filled.CardGiftcard">Đơn hàng</MudNavLink>
            <MudNavLink Href="/cart" Class="contact" Icon="@Icons.Material.Filled.AddShoppingCart">
                Giỏ hàng 
            </MudNavLink>


            @if (isAuthenticated)
            {
                <MudNavLink Href="/account" Class="contact-info" Icon="@Icons.Material.Outlined.Person">Tài khoản</MudNavLink>
                <MudNavLink Href="#" Class="contact-info" Icon="@Icons.Material.Filled.Logout" OnClick="Logout"> Đăng xuất</MudNavLink>
            }
            else
            {
                <MudNavLink Href="/login" Class="contact-info">Đăng nhập</MudNavLink>
            }
        </MudItem>
    </div>
</MudPaper>

<MudPaper>
    <MudContainer Class="breadcrumb-container" MaxWidth="MaxWidth.Large">
        <MudText Typo="Typo.caption" Color="Color.Default" Class="breadcrumb">
            <MudIcon Icon="@Icons.Material.Filled.Home" Color="Color.Error" Class="breadcrumb-icon" />
            <MudLink Href="/" Class="breadcrumb-link">Trang chủ</MudLink>
            <span class="breadcrumb-separator">></span>
            <MudText Typo="Typo.caption" Class="breadcrumb-current">@CurrentPage</MudText>
        </MudText>
    </MudContainer>
</MudPaper>

@code {
    [Inject] private IRoleManager RoleManager { get; set; }
    private string CurrentPage { get; set; } = "Trang chủ";
    private bool IsHomePage { get; set; } = true;
    private bool isAuthenticated { get; set; }
    private string CurrentUserId { get; set; }
    private HubConnection hubConnection;
    private MudTable<GetAllPagedProductsResponse> _table;
    private int cartItemCount = 0;
    protected override async Task OnInitializedAsync()
    {

        hubConnection = hubConnection.TryInitialize(_navigationManager);
        await hubConnection.StartAsync();

        hubConnection.On(ApplicationConstants.SignalR.ReceiveRegenerateTokens, async () =>
        {
            try
            {
                var token = await _authenticationManager.TryForceRefreshToken();
                if (!string.IsNullOrEmpty(token))
                {
                    _snackBar.Add(localizer["Refreshed Token."], Severity.Success);
                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                _snackBar.Add(localizer["You are Logged Out."], Severity.Error);
                await _authenticationManager.Logout();
                _navigationManager.NavigateTo("/");
            }
        });

        hubConnection.On<string, string>(ApplicationConstants.SignalR.LogoutUsersByRole, async (userId, roleId) =>
        {
            if (CurrentUserId != userId)
            {
                var rolesResponse = await RoleManager.GetRolesAsync();
                if (rolesResponse.Succeeded)
                {
                    var role = rolesResponse.Data.FirstOrDefault(x => x.Id == roleId);
                    if (role != null)
                    {
                        var currentUserRolesResponse = await _userManager.GetRolesAsync(CurrentUserId);
                        if (currentUserRolesResponse.Succeeded && currentUserRolesResponse.Data.UserRoles.Any(x => x.RoleName == role.Name))
                        {
                            _snackBar.Add(localizer["You are logged out because the Permissions of one of your Roles have been updated."], Severity.Error);
                            await hubConnection.SendAsync(ApplicationConstants.SignalR.OnDisconnect, CurrentUserId);
                            await _authenticationManager.Logout();
                            _navigationManager.NavigateTo("/login");
                        }
                    }
                }
            }
        });


        // Đăng ký sự kiện LocationChanged
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateBreadcrumb();
    }


    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateBreadcrumb(); // Cập nhật breadcrumb khi URL thay đổi
        InvokeAsync(StateHasChanged); // Kích hoạt render lại
    }

    private void UpdateBreadcrumb()
    {
        var uri = NavigationManager.Uri;
        var segments = new Uri(uri).Segments;

        if (segments.Length <= 1 || segments.Last() == "/")
        {
            // Nếu đang ở trang chủ
            CurrentPage = "Trang chủ";
            IsHomePage = true;
        }
        else
        {
            // Nếu không ở trang chủ
            CurrentPage = segments.Last().Replace("/", "").Replace("-", " ");
            IsHomePage = false;
        }
    }

    public void Dispose()
    {
        // Hủy đăng ký sự kiện khi component bị hủy
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    private async Task Logout()
    {
        // Đăng xuất thông qua SignalR hoặc các phương thức của bạn
        try
        {
            await hubConnection.SendAsync(ApplicationConstants.SignalR.OnDisconnect, CurrentUserId);
            await _authenticationManager.Logout(); // Đảm bảo gọi phương thức logout ở đây
            NavigationManager.NavigateTo("/login"); // Điều hướng người dùng đến trang login sau khi đăng xuất
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout failed: {ex.Message}");
            _snackBar.Add(localizer["Logout failed."], Severity.Error);
        }
    }

    private void OnSearch(string text)
    {
        if (!string.IsNullOrWhiteSpace(text))
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var currentSearch = QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var currentSearchQuery)
                ? currentSearchQuery.ToString()
                : string.Empty;

            if (currentSearch != text)
            {
                NavigationManager.NavigateTo($"/allproducts?search={text}", forceLoad: true);
            }
            else
            {
                NavigationManager.NavigateTo($"/allproducts?search={text}", forceLoad: true);
            }
        }
        else
        {
            _snackBar.Add("Vui lòng nhập từ khóa tìm kiếm.", Severity.Warning);
        }
    }



}
